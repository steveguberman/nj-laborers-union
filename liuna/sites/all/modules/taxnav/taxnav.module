<?php

function taxnav_menu() {

$access = array(TRUE);
$items=array();


$manage ='taxnav';
	$items[$manage]=array();
		$items[$manage]['title'] 		= 'Manage Sections';
		$items[$manage]['description'] 		= 'Catagories Menu';
		$items[$manage]['weight'] 		= '0';
		$items[$manage]['menu_name'] 		=  variable_get('workers_menu');
		$items[$manage]['access arguments']	=  $access;
		$items[$manage]['file path']		=  drupal_get_path('module','taxonomy');
		$items[$manage]['file']			= 'taxonomy.admin.inc';
		$items[$manage]['page callback'] 	= 'drupal_get_form';
		$items[$manage]['page arguments']	=  array('taxonomy_overview_terms', taxonomy_vocabulary_load(variable_get('taxnav_vocabulary')));

$add	='taxnav/add';
	$items[$add]=array();
		$items[$add]['title']			= 'Create New Section';
		$items[$add]['description']		= 'create new section';
		$items[$add]['weight']			= '100';
		$items[$add]['menu_name'] 		=  variable_get('workers_menu');
		$items[$add]['access arguments']	= $access;
		$items[$add]['file path']		= drupal_get_path('module','taxonomy');
		$items[$add]['file']			= 'taxonomy.admin.inc';
		$items[$add]['page arguments']		=  array('taxonomy_form_term',array(),taxonomy_vocabulary_load(variable_get('taxnav_vocabulary')));
		$items[$add]['type']			=  MENU_LOCAL_ACTION;
 /*	
$view	='taxnav_view';
	$items[$view]=array();
		$items[$view]['title'] 			= 'Manage Sections Pages';
		$items[$view]['description'] 		= 'View all navs';
		$items[$view]['menu_name'] 		=  variable_get('workers_menu');
		$items[$view]['weight'] 		= '0';
		$items[$view]['access arguments']	=  $access;
		$items[$view]['page callback'] 		= 'tax_nav_list';
		$items[$view]['type']	 		=  MENU_CALLBACK;

 */

$rebuild ='rebuild';
	$items[$rebuild]=array();
		$items[$rebuild]['title'] 		= 'Rebuild Menu For taxnav';
		$items[$rebuild]['description'] 	= 'Rebuild taxnav menu';
		$items[$rebuild]['weight'] 		= '500';
		$items[$rebuild]['menu_name'] 		=  variable_get('workers_menu');
		$items[$rebuild]['access arguments']	=  $access;
		$items[$rebuild]['file']		= 'build.taxnav.inc';
		$items[$rebuild]['page callback'] 	= 'build';
		#$items[$view]['type']	 		=  MENU_CALLBACK;

	return $items;

};

function tax_nav_list(){
	return node_view_multiple(_taxnav_nodes());
}


function taxnav_taxonomy_term_insert($term){ 
	if($term->vid== variable_get('taxnav_vocabulary')){
	_create_taxnav_page($term);
	_create_taxnav_tree($term); 
	}
}

function taxnav_taxonomy_term_update($term){ 
	if($term->vid== variable_get('taxnav_vocabulary')){
	_create_taxnav_tree($term); 
	}
}

function taxnav_taxonomy_term_delete($term){ 
	if($term->vid== variable_get('taxnav_vocabulary')){
	_create_taxnav_tree($term); 
	_delete_taxnav_page($term);
	}
}

function _create_taxnav_tree($term){
	include_once(drupal_get_path('module','taxnav').'/build.taxnav.inc');
	build();
}


function _create_taxnav_page($term){
xdebug_break();
	//drupal_set_message('Creating term page');

	$body_text = "Please update this information!";

	$node = new stdClass();
	$node->type = 'taxnav';

	node_object_prepare($node);

	$node->title = 'Node created for term '.$term->name;
	$node->language =  LANGUAGE_NONE;

	$node->body[$node->language][0]['value']	= $body_text;
	$node->body[$node->language][0]['summary']	= text_summary($body_text);
	$node->body[$node->language][0]['format']	= 'plain_text';

	$node->tid_to_node[$node->language][0]['value'] = $term->tid;

	// ['path']

	//dpm($node,'Creating Term page');

	node_save($node);
	//drupal_set_message('Term Page Saved');
}


function _delete_taxnav_page($term){
	node_delete(_taxnav_page_from_tid($term->tid)->nid);
}


// now called nodes_of_type($type);
function _taxnav_nodes(){
	$query = new EntityFieldQuery;
		$query->entityCondition('entity_type','node');
		$query->propertyCondition('type','taxnav');
			$results = $query->execute();
	
	$nodes = array();
		foreach($results as $unwrap){
			foreach($unwrap as $node){
			array_push($nodes,$node->nid);
			}
		}
xdebug_break();
	return node_load_multiple($nodes);
}


function _taxnav_page_from_tid($tid){
	//drupal_set_message('Searching for term page');
	$query = new EntityFieldQuery;
		$query->entityCondition('entity_type','node');
		$query->propertyCondition('type','taxnav');
		$query->fieldCondition('tid_to_node','value',$tid,'=');
			$results = $query->execute();
	
	//drupal_set_message('Querying for term page');
	//dpm($results,'Query Results');

		foreach($results as $node){
			foreach($node as $entry){
				//drupal_set_message("Returned Node $entry->nid");
				return node_load($entry->nid);
			}
		}
}


function taxnav_node_info(){
	return array(
		'taxnav'=> array(
			'name' 		=> 'Taxnav Place Holder Pages',
			'base' 		=> 'taxnav',
			'description'	=> 'These pages are created for each taxonomy term created if no page exists for a term it will not be clickable',
			'has_title'	=> 'TRUE',
			'title_label'	=> 'Page Name',
			'help'		=> 'Page will be displayed in menu in lui of taxonomy placeholders'
		)
	);
};


function taxnav_form($node,$form_state){
	return node_content_form($node,$form_state);
}


function taxnav_form_taxnav_node_form_alter(&$form,&$form_state,$form_id){

}

function taxnav_field_widget_text_textarea_with_summary_form_alter(&$element,&$form_state,$context){

	if($element['#field_name'] == 'body'){
		$widget = $element;
			$widget['#type'] = 'textarea';
			unset($widget['#base_type']);
			unset($widget['#format']);
			unset($widget['summary']);
		
		unset($element['#type']);
		unset($element['#default_value']);
		unset($element['#rows']);
		unset($element['#attributes']);
		unset($element['#format']);
		unset($element['#base_type']);

		$element['value'] = $widget;

		//dpm($element,'my element');
	}

}

function taxnav_node_access($node, $op, $account) {

	$type = is_string($node) ? $node : $node->type;

	$q=user_access('create ' . $type . ' content', $account);
	$qq=user_role_permissions(array('admin'));
	$qqq='create ' . $type . ' content';

  if (in_array($type, node_permissions_get_configured_types())) {
    if ($op == 'create' && user_access('create ' . $type . ' content', $account)) {
      return NODE_ACCESS_ALLOW;
    }

    if ($op == 'update') {
      if (user_access('edit any ' . $type . ' content', $account) || (user_access('edit own ' . $type . ' content', $account) && ($account->uid == $node->uid))) {
        return NODE_ACCESS_ALLOW;
      }
    }

    if ($op == 'delete') {
      if (user_access('delete any ' . $type . ' content', $account) || (user_access('delete own ' . $type . ' content', $account) && ($account->uid == $node->uid))) {
        return NODE_ACCESS_ALLOW;
      }
    }
  }

  // Returning nothing from this function would have the same effect.
  return NODE_ACCESS_IGNORE;
}

/* vim: set filetype=php : */
?>
