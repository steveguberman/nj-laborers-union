<?php

function taxnav_menu() {

$path ='admin/taxnav/rebuild';
	$items[$path]=array();
		$items[$path]['title'] 			= 'Tax Nav Build';
		$items[$path]['desciption'] 		= 'Collect all node that are assigned the tax nav vocabulary and build their tree';
		$items[$path]['position'] 		= 'right';
		$items[$path]['weight'] 		= '-100';
		#$items[$path]['type'] 			=  MENU_CALLBACK;
		$items[$path]['page callback'] 		= 'build';
		$items[$path]['access arguments'] 	=  array('administer site configuration');
		$items[$path]['file'] 			= 'build.taxnav.inc';
		$items[$path]['file path'] 		=  drupal_get_path('module','taxnav');
	
	return $items;
};

function taxnav_permission(){
}

function taxnav_taxonomy_term_delete($vocabulary){ _taxnav_taxonomy_change($vocabulary); }
function taxnav_taxonomy_term_insert($vocabulary){ _taxnav_taxonomy_change($vocabulary); }
function taxnav_taxonomy_term_update($vocabulary){ _taxnav_taxonomy_change($vocabulary); }

function _taxnav_taxonomy_change($vocabulary){
	if($vocabulary->vid== variable_get('taxnav_vocabulary')){
	include_once(drupal_get_path('module','taxnav').'/build.taxnav.inc');
	build();
	}
}




function taxnav_node_info(){
	return array(
		'taxnav'=> array(
			'name' 		=> 'Taxnav Place Holder Pages',
			'base' 		=> 'taxnav',
			'description'	=> 'These pages are created for each taxonomy term created if no page exists for a term it will not be clickable',
			'has_title'	=> 'TRUE',
			'title_label'	=> 'Page Name',
			'help'		=> 'Page will be displayed in menu in lui of taxonomy placeholders'
		)
	);
};




function taxnav_form($node,$form_state){
	return node_content_form($node,$form_state);
}

/* universal form override
function taxnav_form_alter(&$form,&$form_state,$form_id){
}
*/

function taxnav_form_taxnav_node_form_alter(&$form,&$form_state,$form_id){
	$form['options']['#access']=user_access('edit any taxnav content');
	xdebug_break();
}

/* custom validation
function taxnav_validate($node,$form,$form_state){
}
*/

function taxnav_node_access($node, $op, $account) {

	$type = is_string($node) ? $node : $node->type;

	$q=user_access('create ' . $type . ' content', $account);
	$qq=user_role_permissions(array('admin'));
	$qqq='create ' . $type . ' content';

  if (in_array($type, node_permissions_get_configured_types())) {
    if ($op == 'create' && user_access('create ' . $type . ' content', $account)) {
      return NODE_ACCESS_ALLOW;
    }

    if ($op == 'update') {
      if (user_access('edit any ' . $type . ' content', $account) || (user_access('edit own ' . $type . ' content', $account) && ($account->uid == $node->uid))) {
        return NODE_ACCESS_ALLOW;
      }
    }

    if ($op == 'delete') {
      if (user_access('delete any ' . $type . ' content', $account) || (user_access('delete own ' . $type . ' content', $account) && ($account->uid == $node->uid))) {
        return NODE_ACCESS_ALLOW;
      }
    }
  }

  // Returning nothing from this function would have the same effect.
  return NODE_ACCESS_IGNORE;
}

/* vim: set filetype=php : */
?>
