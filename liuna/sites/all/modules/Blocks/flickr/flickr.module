<?php
/**
 * @file flickr.module
 *
 * Displays a grid of photo thumbnail links from a Flickr feed.
 */

/**
 * Implementation of hook_block_info()
 */
function flickr_block_info() {
	$blocks['flickr'] = array(
		'info' => t('Display Flickr Feed Thumbnails'),
		'status' => TRUE,
		'region' => 'footer',
		'weight' => 0,
		'visibility' => 1,
	);
	return $blocks;
}

/**
 * Implementation of hook_menu()
 */
function flickr_menu() {
	$items['admin/config/flickr'] = array(
		'title' => 'Flickr',
		'description' => 'Displays a random selection of a user\'s Flickr favorites',
		'position' => 'right',
		'weight' => -5,
		'page callback' => 'system_admin_menu_block_page',
		'access arguments' => array('administer site configuration'),
		'file' => 'system.admin.inc',
		'file path' => drupal_get_path('module', 'system'),
	);

	$items['admin/config/flickr/settings'] = array(
		'title' => 'Flickr Feed Settings',
		'description' => 'Flickr Widget Settings',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('flickr_admin_settings'),
		'access arguments' => array('administer site configuration'),
		'type' => MENU_NORMAL_ITEM,
		'file' => 'flickr.admin.inc',
	);

	return $items;
}

/**
 * Implementation of hook_theme()
 */
function flickr_theme() {
	return array(
		'flickr_thumbnail_grid' => array(
			'arguments' => array('items' => NULL, 'photo_count' => 15),
		),
	);
}

function theme_flickr_thumbnail_grid($items) {
	$limit  = $items['photo_count'];
	$photos = flickr_assemble_photo_array($items['items']);

	$output = '<ul id="flickr-thumbnail-grid">' . "\n";
	foreach($photos as $photo) {
		$output .= <<<END_LIST_ITEM
<li class="flickr-thumb">
	<a href="{$photo['url']}" class="photo-wrap {$photo['class']}">
		<img src="{$photo['source']}" width="{$photo['width']}" height="{$photo['height']}" alt="{$photo['label']}" />
	</a>
</li>
END_LIST_ITEM;
	}
	$output .= "</ul>";
	return $output;
}

/**
 * Helper: assemble_photo_array($items, $limit)
 *
 * Assembles an array of landscape photos for use in the Flickr thumbnail grid
 */
function flickr_assemble_photo_array($items) {
	$output = array();
	foreach ($items as $item) {
		$api_key = variable_get('flickr_api_key', '6dccccbedab9f442055f9d2a25ab6428');
		$photo_url = flickr_api_url(array(
			'method'   => 'flickr.photos.getSizes',
			'api_key'  => $api_key,
			'photo_id' => $item['id'],
			'format'   => 'php_serial',
		));
		$curl = curl_init();
		$curl_opts = array(
			CURLOPT_URL => $photo_url,
			CURLOPT_RETURNTRANSFER => true,
		);
		curl_setopt_array($curl, $curl_opts);
		$resp = curl_exec($curl);

		if (array_key_exists('sizes', $resp)) {
			$sizes      = $resp['sizes'];
			$photo_data = $sizes[2];
			$photo_data['class'] = $photo_data['width'] > $photo_data['height'] ? 'landscape' : 'portrait';
			$output[]   = $photo_data;
		}
	}

	$remainder = count($output) % 6;
	if ($remainder) {
		$output = array_slice($output, 0, count($output) - $remainder);
	}

	return $output;
}

/**
 * Helper: Build Flickr API URL
 */
function flickr_api_url($args) {
	$base = "http://api.flickr.com/services/rest/?";
	if (0 < count($args)) {
		foreach ($args as $key => $val) {
			$encoded_val = urlencode($val);
			$base .= "{$key}={$encoded_val}&";	
		}
	}
	return rtrim($base, "&?");
}

/**
 * Implementation of hook_block_view()
 */
function flickr_block_view($delta = '') {
	switch ($delta) {
		case 'flickr':
			$block['subject'] = t('Flickr Block');
			$block['content'] = flickr_block_contents($delta);
			return $block;
			break;
	}
}

// provides content for block_view function above
function flickr_block_contents($delta) {
	switch ($delta) {
	case 'flickr':
		$user_id     = variable_get('flickr_user_nsid', '62751423@N00');
		$api_key     = variable_get('flickr_api_key', '6dccccbedab9f442055f9d2a25ab6428');
		$photo_count = variable_get('flickr_num_photos', 16);
		$flickr_url  = flickr_api_url(array(
			'method'  => 'flickr.favorites.getPublicList',
			'api_key' => $api_key,
			'user_id' => $user_id,
			'format'  => 'php_serial',
		));
		$curl = curl_init();
		$curl_opts = array(
			CURLOPT_URL => $flickr_url,
			CURLOPT_RETURNTRANSFER => true,
		);
		curl_setopt_array($curl, $curl_opts);

		$flickr_photos = curl_exec($curl);

		if ($feed = unserialize($flickr_photos)) {
			$photos = $feed['photos']['photo'];

			if ($photo_count >= count($photos)) {
				$photo_selection = $photos;
			} else {
				$randomized      = shuffle($photos);
				$photo_selection = array_slice($randomized, 0, $photo_count);
			}

			$content = theme('flickr_thumbnail_grid', array('items' => $photo_selection));
			return array('#markup' => $content);
		}

		break;
	}
}

// vim: set ft=php :
?>
