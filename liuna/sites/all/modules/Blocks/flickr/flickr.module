<?php
/**
 * @file flickr.module
 *
 * Displays a grid of photo thumbnail links from a Flickr feed.
 */

/**
 * Implementation of hook_block_info()
 */
function flickr_block_info() {
	$blocks['flickr'] = array(
		'info' => t('Display Flickr Feed Thumbnails'),
		'status' => TRUE,
		'region' => 'footer',
		'weight' => 0,
		'visibility' => 1,
	);
	return $blocks;
}

/**
 * Implementation of hook_menu()
 */
function flickr_menu() {
	$items['admin/config/flickr'] = array(
		'title' => 'Flickr',
		'description' => 'Display a grid of thumbnails from a Flickr feed',
		'position' => 'right',
		'weight' => -5,
		'page callback' => 'system_admin_menu_block_page',
		'access arguments' => array('administer site configuration'),
		'file' => 'system.admin.inc',
		'file path' => drupal_get_path('module', 'system'),
	);

	$items['admin/config/flickr/settings'] = array(
		'title' => 'Flickr Feed Settings',
		'description' => 'Flickr Widget Settings',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('flickr_admin_settings'),
		'access arguments' => array('administer site configuration'),
		'type' => MENU_NORMAL_ITEM,
		'file' => 'flickr.admin.inc',
	);

	return $items;
}

/**
 * Implementation of hook_theme()
 */
function flickr_theme() {
	return array(
		'flickr_thumbnail_grid' => array(
			'arguments' => array('items' => NULL, 'photo_count' => 15),
		),
	);
}

function theme_flickr_thumbnail_grid($items) {
	$limit  = $items['photo_count'];
	$photos = flickr_assemble_photo_array($items['items'], $limit);

	$output = '<ul id="flickr-thumbnail-grid">' . "\n";
	foreach($photos as $photo) {
		$output .= <<<END_LIST_ITEM
<li class="flickr-thumb">
	<a href="{$photo['url']}" class="photo-wrap">
		<img src="{$photo['src']}" width="{$photo['width']}" height="{$photo['height']}" alt="{$photo['alt']}" />
	</a>
</li>
END_LIST_ITEM;
	}
	$output .= "</ul>";
	return $output;
}

/**
 * Helper: assemble_photo_array($items, $limit)
 *
 * Assembles an array of landscape photos for use in the Flickr thumbnail grid
 */
function flickr_assemble_photo_array($items, $limit) {
	$output = array();
	$count  = 0;
	foreach ($items as $item) {
		// Parse Flickr's pre-built HTML string for image data
		$dom = new DOMDocument;
		$dom->loadHTML($item['description']);
		$img = $dom->getElementsByTagName('img')->item(0);

		// grab image attributes
		$photo_data = array(
			'width'    => (int)$img->getAttribute('width') / 2,
			'height'   => (int)$img->getAttribute('height') / 2,
			'src'      => $img->getAttribute('src'),
			'alt'      => $img->getAttribute('alt'),
			'url'      => $item['url'],
			'raw_html' => $item['description'],
		);

		// skip portrait images
		if ($photo_data['height'] > $photo_data['width']) continue;
		if ($count++ > $limit) break;

		// otherwise, append photo to output array
		$output[] = $photo_data;
	}

	$remainder = count($output) % 6;
	if ($remainder) {
		$output = array_slice($output, 0, count($output) - $remainder);
	}

	return $output;
}

/**
 * Implementation of hook_block_view()
 */
function flickr_block_view($delta = '') {
	switch ($delta) {
		case 'flickr':
			$block['subject'] = t('Flickr Block');
			$block['content'] = flickr_block_contents($delta);
			return $block;
			break;
	}
}

/**
 * Implementation of hook_block_contents()
 */
function flickr_block_contents($delta) {
	switch ($delta) {
	case 'flickr':
		$feed_url = variable_get('flickr_feed_url', 'http://api.flickr.com/services/feeds/photos_faves.gne?nsid=62751423@N00&lang=en-us&format=php_serial');
		$photo_count = variable_get('flickr_num_photos', 16);
		$flickr_feed = file_get_contents($feed_url);

		if ($feed = unserialize($flickr_feed)) {
			xdebug_break();
			$content = theme('flickr_thumbnail_grid', array('items' => $feed['items'], 'photo_count' => $photo_count));
			//return $content;
			return array('#markup' => $content);
		}

		break;
	}
}

// vim: set ft=php :
?>
