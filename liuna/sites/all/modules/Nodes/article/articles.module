<?php
/**
 * @file
 * Lets user create articless in the articles section of the site.
 *
 * Displays a link that lets authenticated users create articles section articless.
 * All these articless are viewable by default to all the sites visitors.
 * Pages do not need to be approved. Default is to display the articles.
 */


function articles_permission(){
	$items = array();	
	$unions = nodes_of_type('union');

	foreach($unions as $union){
		$items['Publish to '.$union->title]['title'] 		= 'Publish to '.$union->title;
		$items['Publish to '.$union->title]['description'] 	= 'User can create articles visible to the '.$union->title.' article section';
	}
		return $items;

}


function articles_block_info(){

	$items = array();
		$items['articles_list'] = array();
		$items['articles_list']['info'] = 'Union Articles';
			return $items;
}

function articles_theme(){
	
	$items = array();
		$items['articles_list'] = array();
		$items['articles_list']['variables'] 	= array('articles'=>NULL);
		$items['articles_list']['file'] 	= 'articles.block.inc';
		$items['articles_list']['template'] 	= 'articles-list';

			return $items;
}


function articles_block_view($delta=''){
	$block = array();
	
	switch ($delta){

	case 'articles_list':
		global $union_nid;
		if(!isset($union_nid)){
			return;
		}

		$block['subject'] = 'Articles List Block';
		$block['content'] =  articles_list_block_contents($delta);
		break;
	}		
	return $block;
}


function articles_list_block_contents($delta){

	global $union_nid;
	$articles = _articles_by_union($union_nid);
	$content = theme('articles_list',array('articles'=>$articles));

	return $content;
}


function articles_node_info(){
	return array(
		'articles'=> array(
			'name' 		=> 'Article Pages',
			'base' 		=> 'articles',
			'description'	=> 'Union Article Pages',
			'has_title'	=> 'TRUE',
			'title_label'	=> 'Page Name',
			'help'		=> 'Article will be displayed based on unions select etc...'
		)
	);
};


function articles_form($node,$form_state){
	return node_content_form($node,$form_state);
}

function articles_node_access($node, $op, $account) {
 
	$type = is_string($node) ? $node : $node->type;

	$q=user_access('create ' . $type . ' content', $account);
	$qq=user_role_permissions(array('admin'));
	$qqq='create ' . $type . ' content';

  if (in_array($type, node_permissions_get_configured_types())) {
    if ($op == 'create' && user_access('create ' . $type . ' content', $account)) {
      return NODE_ACCESS_ALLOW;
    }

    if ($op == 'update') {
      if (user_access('edit any ' . $type . ' content', $account) || (user_access('edit own ' . $type . ' content', $account) && ($account->uid == $node->uid))) {
        return NODE_ACCESS_ALLOW;
      }
    }

    if ($op == 'delete') {
      if (user_access('delete any ' . $type . ' content', $account) || (user_access('delete own ' . $type . ' content', $account) && ($account->uid == $node->uid))) {
        return NODE_ACCESS_ALLOW;
      }
    }
  }

  // Returning nothing from this function would have the same effect.
  return NODE_ACCESS_IGNORE;
}


function union_field_allowed_values($field){
$union_list = nodes_of_type('union');
$union_list_mapped = array();

	foreach($union_list as $nid => $union){
		foreach(_permissions_list() as $permission){
			if($permission == 'Publish to '.$union->title){
			dpm($nid,'saved as uid');
			$union_list_mapped[$nid] = $union->title;
			}
		}
	}
		return $union_list_mapped;
}

function _permissions_list(){
	global $user;

	$user_permissions_list = array();
		foreach(user_role_permissions($user->roles) as $permission_group){
			foreach($permission_group as $permission => $true){
			$user_permissions_list[] = $permission;
			}			
		}
	return $user_permissions_list;
}


function _articles_by_union($union_nid){
	
	$articles 	= nodes_of_type('articles');
	$output		= array();
	
	foreach($articles as $article){
		dpm($article,'article values');	
		foreach($article->unions_field[$article->language][0] as $publish_to ){
			//dpm($publish_to,'pub 2');
			//dpm($variables['union_nid'],'nid');
			if($publish_to == $union_nid){
			$output[] = $article;
			}
		}
	}
		return $output;
}


/* vim: set filetype=php : */
?>
