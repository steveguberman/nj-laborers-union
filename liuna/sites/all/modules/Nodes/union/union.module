<?php
/**
 * @file
 * Lets user create pages in the union section of the site.
 *
 * Displays a link that lets authenticated users create union section pages.
 * All these pages are viewable by default to all the sites visitors.
 * Pages do not need to be approved. Default is to display the page.
 */

/**
 * Implementation of hook_menu().
 */

//nodes_of_type($type);
function union_menu() {

	$access = true;

$new	= 'union/new';
	$items[$newUnion] = array();
		$items[$new]['title'] 			= 'Add new Union';
		$items[$new]['description'] 		= 'Add a new union';
		$items[$new]['menu_name'] 		=  variable_get('workers_menu');
		$items[$new]['page callback'] 		= 'node_add';
		$items[$new]['page arguments']		= 'union';
		$items[$new]['access callback']		= 'node_access';
		$items[$new]['access arguments']	=  array('create union');
		$items[$new]['file path'] 		=  drupal_get_path('module','node');
		$items[$new]['file'] 			= 'node.pages.inc';
	 
//$editUnion
$view	= 'union/view';
	$items[$view]=array();
		$items[$view]['title'] 			= 'View and edit union pages';
		$items[$view]['description'] 		= 'View all unions';
		$items[$view]['menu_name'] 		=  variable_get('workers_menu');
		$items[$view]['weight'] 		= '0';
		$items[$view]['page callback'] 		=  union_rendered_list();
		$items[$view]['access arguments']	=  $access;
		#$items[$view]['type']	 		=  MENU_CALLBACK;

	return $items;
}

function union_rendered_list(){
return node_view_multiple(nodes_of_type('union'));
}


/**
 * Implements hook_node_info() to provide info union type.
 */


function union_node_info(){
	return array(
		'union'=> array(
			'name' 		=> 'Union Pages',
			'base' 		=> 'union',
			'description'	=> 'site About pages',
			'has_title'	=> 'TRUE',
			'title_label'	=> 'Page Name',
			'help'		=> 'Page will be displayed in menu under the FAQ page'
		)
	);
};

/**
 * Implement hook_form() with the standard default form.
 */
function union_form($node,$form_state){
	xdebug_break();
	return node_content_form($node,$form_state);
}

function union_node_access($node, $op, $account) {
 
	$type = is_string($node) ? $node : $node->type;

	$q=user_access('create ' . $type . ' content', $account);
	$qq=user_role_permissions(array('admin'));
	$qqq='create ' . $type . ' content';

  if (in_array($type, node_permissions_get_configured_types())) {
    if ($op == 'create' && user_access('create ' . $type . ' content', $account)) {
      return NODE_ACCESS_ALLOW;
    }

    if ($op == 'update') {
      if (user_access('edit any ' . $type . ' content', $account) || (user_access('edit own ' . $type . ' content', $account) && ($account->uid == $node->uid))) {
        return NODE_ACCESS_ALLOW;
      }
    }

    if ($op == 'delete') {
      if (user_access('delete any ' . $type . ' content', $account) || (user_access('delete own ' . $type . ' content', $account) && ($account->uid == $node->uid))) {
        return NODE_ACCESS_ALLOW;
      }
    }
  }

  // Returning nothing from this function would have the same effect.
  return NODE_ACCESS_IGNORE;
}



function union_node_insert($node){
	
}




/* vim: set filetype=php : */
?>
