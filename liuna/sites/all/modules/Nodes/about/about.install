<?php
/**
 * @file
 * Install file for About pages node.
 */

/**
 * Implements hook_install()
 * - Add the tile field
 * - Add the body field
 * - Configure the body field
 */

function about_install()
{
	xdebug_break();

	// If modules where loaded during this run of hook install make sure previous modules have had
	// database entries and node types have been updated
	field_associate_fields('taxonomy');
	node_types_rebuild();

		$nav_tags = new stdClass;
			$nav_tags->name		= 'about_vocabulary';
			$nav_tags->machine_name = 'about_vocabulary';
			$nav_tags->description	= 'Sub pages for the about navigation section';
			$nav_tags->hierarchy	=  1;
			$nav_tags->module	= 'about';
			$nav_tags->weight	=  0;
		
		taxonomy_vocabulary_save($nav_tags);
		variable_set( 'about_vocabulary' ,  $nav_tags->vid );

		$vocabulary_nav_field = array(
					'field_name'	=> 'about_vocabulary',
					'type'		=> 'taxonomy_term_reference',
					'settings'	=> array(
								'allowed_values' => array(
											array(
											'vocabulary' => 'about_vocabulary',
											'parent' => '0',
											),
										),
							),
					);

		field_create_field($vocabulary_nav_field);
		

	$types = node_type_get_types();

	// Add the nodes body field
	node_add_body_field($types['about']);
	// Load the instance definition for out content type`s body
	$body_instance = field_info_instance('node','body','about');
	// Configure the body field
	$body_instance['type'] = 'text_summary_or_trimmed';

	// Save the changes to the body field instance.
	field_update_instance($body_instance);

	$vocabulary_nav_field_instance = array(
				'field_name' => 'about_vocabulary',
				'entity_type' => 'node',
				'bundle' => 'about',
				'widget' => array(
						'type' => 'options_select',
						),
				'display' => array(
						'full' => array(
							  'type' => 'taxonomy_term_reference_link',
							),
					),
				);
	
	xdebug_break();
	field_create_instance($vocabulary_nav_field_instance);
/*
	// Create all the fields we are adding to out content type.
	foreach ( _about_installed_fields() as $field){
		#field_create_field($field);
	}

	// Create all the instances of out field
	foreach (_about_installed_instances() as $instance){
		#$instance['entity_type']= 'node';
		#$instance['bundle']	= 'about';
		#field_create_instance($instance);
	}
*/
}

/**
 * Implements hook_enable() function about_enable(){}
 */
/*
function  _about_installed_fields(){
	return $fields
}

function _about_installed_instances(){
	return $fields
}
*/


function about_uninstall()
{


xdebug_break();

// Gather all the example content that might have been created while this
// module enabled.
$sql	= 'Select nid FROM {node} n WHERE n.type = :type';
$result	= db_query($sql, array(':type' => 'about'));
$nids	= array();

	foreach($result as $row){
	$nids[]= $row->nid;
	}

node_delete_multiple($nids);

/*
// Loop over each of the fields defined by this module and delete
// all instances of the field, their data, and the field itself.
	foreach(array_keys(_about_installed_fields()) as $field){
	field_delete_field($field);
	}

// Loop over any remaining field instances attached to the job_post
// content type ( such as the body field) and delete them individually.
	$instances = field_info_instances('node','about');
	foreach( $instances as $instance_name => $instance ){
		field_delete_instance($instance);
	}
*/

	node_type_delete('about');

	drupal_load('module', 'taxonomy');
	xdebug_break();
	taxonomy_vocabulary_delete(variable_get('about_vocabulary'));
	field_delete_field('about_vocabulary');

	variable_del('about_vocabulary');

// Purge all field information
field_purge_batch(1000);

}


/* vim: set filetype=php : */
?>
